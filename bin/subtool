#!/usr/bin/env node

/**
 * The subtool commandline interface.
 */


/**
 * Module dependencies.
 */
var fs = require('fs');
var path = require('path');
var clc = require('cli-color');
var program = require('commander');
var shell = require('shelljs/global');
var pkg = require('./../package.json');
var license = require('./../src/license');
var log = require('./../src/log');
var readme = require('./../src/readme');
var subfile = require('./../src/subfile');
var travis = require('./../src/travis-ci');

/**
 * The current working directory of the terminal.
 */
var CWD = process.cwd();

/**
 * Some variables we need globally.
 */
var descColor = clc.green;
var infoColor = clc.yellow;
var logConfig = {silent: false, color: 'green'};

/**
 * Set the version of the cli and add some additional infos to help
 */
program
  .version(pkg.version)
  .option('-S, --silent', 'silent mode')
  .option('-N, --colorless', 'disable terminal color')
  .on('--help', function(){
    console.log('  Infos:');
    console.log();
    console.log(infoColor('    github.com/subtub/subtool'));
    console.log();
  });

/**
 * The update command
 */
program
  .command('update')
  .description(descColor('update the subtool'))
  .action(function() {
    var request = require('request');
    var semver = require('semver');
    // we need the latest package.json.
    // lets request in from the github repository
    request('https://raw.github.com/subtub/subtool/master/package.json', function (error, response, body) {
      if (!error && response.statusCode == 200) {
        // parse the body and get the latest version.
        var tmp = JSON.parse(body);
        var latestVersion = tmp.version;
        // Check if a new version was released.
        if (pkg.version === latestVersion) {
          log('You have the latest version installed.', logConfig);
        } else if (semver.lt(pkg.version, latestVersion)) {
          log('A new version exists. Start Installing the new release.', logConfig);
          exec('sudo npm uninstall -g subtool');
          exec('sudo npm install -g https://github.com/subtub/subtool/tarball/master')
        }
      }
    })
  });

/**
 * The init command
 */
program
  .command('init')
  .description(descColor('save a .subfile to the current directory'))
  .option('-t, --travis', 'add a .travis.yml file')
  .action(function(options) {
    
    var tmpPath = path.dirname(__dirname);
    //cat(tmpPath+'/templates/.subfile').to(CWD+'/.subfile');
    cp(tmpPath+'/templates/.subfile', CWD+'/.subfile');
    mkdir(CWD+'/docs');
    cp(tmpPath+'/templates/general_information.md', CWD+'/docs/general_information.md');
    
    if (options.travis) {
      var tmp = 'language: node_js\nnode_js:\n  - 0.8\n  - 0.10';
      tmp.to('.travis.yml');
    };

    log('A `.subfile` has been placed in this directory. You are now', logConfig);
    log('ready to start writing your README.md file content. Please read', logConfig);
    log('the comments in the `.subfile` as well as documentation on', logConfig);
    log('the project page for more information on using subtool.', logConfig);
  })

/**
 * The readme command
 */
program
  .command('readme')
  .description(descColor('generate the readme file'))
  .option('-d, --display', 'Print the generated reamde content to console')
  .option('-g, --git-commit', 'auto commit the README.md file.')
  .action(function(options) {
    // Load the .subfile at first.
    subfile.load(CWD, function(configData) {
      if (configData === false) {
        log('No .subfile file was found. please create one.', logConfig);
        process.exit(1);
      }
      else {
        readme.generate(configData, function(data) {
          if (options.display) {
            log(data, logConfig);
          }
          else {
            fs.writeFile('README.md', data, function (err) {
              if (err) throw err;
              log('Readme file saved!', logConfig);

              if (options.gitCommit) {
                exec('git add README.md');
                exec('git commit -m "README.md updated and auto commited by subtool [ci skip]"');
              };
            });
            //travis.saveYml(process.env.PWD, configData.travis, function(data) {});
          };
        });
      }
    });
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    # Generate the content and save the file.');
    console.log(infoColor('    $ subtool readme'));
    console.log();
    console.log('    # Generate the content and print to console.');
    console.log(infoColor('    $ subtool readme -d'));
    console.log();
    console.log('    # Generate the file and git commit the changes.');
    console.log(infoColor('    $ subtool readme -g'));
    console.log();
  });

/**
 * The license command
 */
program
  .command('license <type>')
  .description(descColor('choose between the following license: apache, freebsd, isc, mit, newbsd'))
  .option('-a, --author [name]', 'the author name we want to use')
  .option('-d, --date [year]', 'the year')
  .option('-s, --save', 'save the license file')
  // TODO:
  //.option('-s, --save', 'save the file')
  .action(function(type, options) {
    // If options doesn't exists, set some default values.
    var author = options.author || 'subtub';
    var date = options.date || (new Date()).getFullYear();
    
    // check if we want to save a LICENSE.txt file.
    // Else we print out the license.
    if (options.save) {
      license.save(CWD, type, author, date, logSilent, function(data) {
        log(license.FILENAME+' saved to current directory.', logSilent)
      });
    }
    else {
      license.get(type, author, date, logConfig, function(data) {
        console.log(data);
      });
    };
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log(infoColor('    $ subtool license mit -a subtub'));
    console.log(infoColor('    $ subtool license mit -a "karl koch" -y 2013'));
    console.log(infoColor('    $ subtool license mit -a "karl koch" -y "2010 - 2013"'));
    console.log();
  });

/**
 * The templates command
 */
program
  .command('tpl [type]')
  .description(descColor('choose between the following template types: p5, node'))
  .option('-a, --all', 'list all template types')
  .option('-s, --sample [name]', 'the template sample we want to use')
  .option('-l, --list', 'list the available templates of a type')
  .action(function(type, options) {
    var indexJson = require(path.dirname(__dirname)+'/templates/index.json');
    
    // List all available template types
    if (options.all) {
      log('list of available types:', logConfig);
      log('', logConfig);
      for (var i = 0; i < indexJson.content.length; i++) {
        log('  - '+indexJson.content[i].command, logConfig);
        log('    '+indexJson.content[i].description, logConfig);
        log('', logConfig);
      };
    }

    if (type !== undefined) {
      for (var i=0; i<indexJson.content.length; i++) {
        // check if the type is a command from the index.json
        if (type === indexJson.content[i].command) {
          // Check the options
          if (options.list) {
            var list = fs.readdirSync(path.dirname(__dirname)+'/templates'+indexJson.content[i].folder)
            log('choose between the following templates:\n', logConfig);
            for (var i=0; i<list.length; i++) {
              log('  '+list[i], logConfig);
            };
            log('', logConfig);
          }
          if (options.sample) {
            var tmpPath = path.dirname(__dirname)+'/templates'+indexJson.content[i].folder+'/'+options.sample;
            console.log(tmpPath);
            var tmp = cat(tmpPath);
            console.log(tmp);
          };
        };
      };
    };
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log(infoColor('    $ subtool template p5 -a class'));
    console.log();
  });

/**
 * Parse the process arguments
 */
program.parse(process.argv);

/**
 * Check some main options and set variables.
 */
if (program.silent) {
  logConfig.silent = true;
};
if (program.colorless) {
  logConfig = {silent: false};
};

/**
 * If no command exist, show help
 */
if (!program.args.length) program.help();
