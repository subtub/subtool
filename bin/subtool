#!/usr/bin/env node

/**
 * The subtool commandline interface.
 */


/**
 * Module dependencies.
 */
var fs = require('fs');
var program = require('commander');
var pkg = require('./../package.json');
var subfile = require('./../src/subfile');
var readme = require('./../src/readme');
var license = require('./../src/license');
var log = require('./../src/log');

/**
 * Some variables we need
 */
var logSilent = false;

/**
 * Set the version of the cli and add some additional infos to help
 */
program
  .version(pkg.version)
  .option('-S, --silent', 'silent mode')
  .on('--help', function(){
    console.log('  Infos:');
    console.log();
    console.log('    github.com/subtub/subtool');
    console.log();
  });

/**
 * The config command
 */
program
  .command('config')
  .description('subtool config commands')
  .option('-l, -lint', 'lint the config file')
  .action(function(options) {
    console.log('todo ');
    console.log(options);
  })

/**
 * The readme command
 */
program
  .command('readme')
  .description('generate the readme file')
  .option('-s, --save', 'save the file')
  .action(function(options) {
    // Some config stuff we need to run first.
    subfile.load(process.env.PWD+'/.subfile', function(configData) {
      if (configData === false) {
        log('No .subfile file was found. please create one.', logSilent);
      } else {
        readme.readme(configData, function(data) {
          if (options.save) {
            fs.writeFile('README.md', data, function (err) {
              if (err) throw err;
              log('It\'s saved!', logSilent);
            });
          } else {
            log(data, logSilent);
          };
        });
      }
    });
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ subtool readme');
    console.log();
  });

/**
 * The license command
 */
program
  .command('license <type>')
  .description('choose between the following license: apache, freebsd, isc, mit, newbsd')
  .option('-a, --author [name]', 'the author')
  .option('-d, --date [year]', 'the year')
  // TODO:
  //.option('-s, --save', 'save the file')
  .action(function(type, options) {
    // If options doesn't exists, set some default values.
    var author = options.author || 'subtub';
    var date = options.date || (new Date()).getFullYear();
    // parse the type
    if (type === 'apache') {
      license.apache(author, date, function(data) {
        console.log(data);
      });
    } else if (type === 'freebsd') {
      license.freebsd(author, date, function(data) {
        console.log(data);
      });
    } else if (type === 'isc') {
      license.isc(author, date, function(data) {
        console.log(data);
      });
    } else if (type === 'mit') {
      license.mit(author, date, function(data) {
        console.log(data);
      });
    } else if (type === 'newbsd') {
      license.newbsd(author, date, function(data) {
        console.log(data);
      });
    } else {
      log('', logSilent);
      log('  error: not correct license type. use the following types:', logSilent);
      log('         apache, freebsd, isc, mit, newbsd', logSilent);
      log('', logSilent);
    };
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ subtool license mit -a subtub');
    console.log('    $ subtool license mit -a "karl koch" -y 2013');
    console.log('    $ subtool license mit -a "karl koch" -y "2010 - 2013"');
    console.log();
  });

/**
 * Parse the process arguments
 */
program.parse(process.argv);

/**
 * Check some main options and set variables.
 */
if (program.silent) {
  logSilent = true;
};

/**
 * If no command exist, show help
 */
if (!program.args.length) program.help();
